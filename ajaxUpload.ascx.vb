'**************************************************
' FILE      : AjaxUpload.ascx.vb
' AUTHOR    : Paulo.Santos
' CREATION  : 10/25/2007 8:43:29 PM
' COPYRIGHT : Copyright © 2007
'             PJ on Development
'             All Rights Reserved.
'
' Description:
'       Asynchronously upload a file to an ASP.NET page
'
' Change log:
' 0.1   10/25/2007 8:43:29 PM
'       Paulo.Santos
'       Created.
'***************************************************

Imports System.Web.UI
Imports System.ComponentModel
Imports System.Runtime.Serialization

Partial Public Class AjaxUpload
    Inherits System.Web.UI.UserControl

    Private __FileList As New Dictionary(Of Guid, FileInfo)

#Region " Classes "

    ''' <summary>
    ''' Represents the information about an uploaded file
    ''' </summary>
    <Serializable()> _
    Public Class FileInfo
        Implements ISerializable

        Private __FileName As String
        Private __FileSize As Integer
        Private __ContentType As String
        Private __ID As Guid
        Private __Url As Uri

        ''' <summary>
        ''' Initializes an instance of the <see cref="FileInfo" /> class.
        ''' </summary>
        ''' <param name="id">A <see cref="Guid"/> that represents the Globaly Unique ID of the file in the server.</param>
        ''' <param name="fileName">The name of the file.</param>
        ''' <param name="fileSize">The size, in bytes, of the file.</param>
        Friend Sub New(ByVal id As Guid, ByVal fileName As String, ByVal fileSize As Integer, ByVal contentType As String, ByVal url As Uri)
            __ID = id
            __FileName = fileName
            __FileSize = fileSize
            __ContentType = contentType
            __Url = url
        End Sub

        ''' <summary>
        ''' Initializes an instance of the <see cref="FileInfo" /> class.
        ''' </summary>
        ''' <param name="info">The data generated by the GetObjectData method during serialization.</param>
        ''' <param name="context">The context of the deserialization.</param>
        Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
            __ID = New Guid(info.GetString("ID"))
            __FileName = info.GetString("FileName")
            __FileSize = info.GetInt32("FileSize")
            __ContentType = info.GetString("ContentType")
            If (info.GetString("Url") <> "") Then
                __Url = New Uri(info.GetString("Url"))
            End If
        End Sub

        ''' <summary>
        ''' Gets the content-type of the file.
        ''' </summary>
        ''' <value>The content-type of the file.</value>
        Public ReadOnly Property ContentType() As String
            Get
                Return __ContentType
            End Get
        End Property

        ''' <summary>
        ''' Gets the name of the file.
        ''' </summary>
        ''' <value>The name of the file.</value>
        Public ReadOnly Property FileName() As String
            Get
                Return __FileName
            End Get
        End Property

        ''' <summary>
        ''' Gets the size of the file.
        ''' </summary>
        ''' <value>The size of the file.</value>
        Public ReadOnly Property FileSize() As Integer
            Get
                Return __FileSize
            End Get
        End Property

        ''' <summary>
        ''' Gets the ID.
        ''' </summary>
        ''' <value>The ID.</value>
        Public ReadOnly Property ID() As Guid
            Get
                Return __ID
            End Get
        End Property

        ''' <summary>
        ''' Gets the URL pointing to the file.
        ''' </summary>
        ''' <value>The URL pointing to the file.</value>
        Public ReadOnly Property Url() As Uri
            Get
                Return __Url
            End Get
        End Property

        ''' <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the data needed to serialize the target object.</summary>
        ''' <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"></see>) for this serialization. </param>
        ''' <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data. </param>
        ''' <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        Public Sub GetObjectData(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext) Implements System.Runtime.Serialization.ISerializable.GetObjectData
            info.AddValue("ID", __ID.ToString())
            info.AddValue("FileName", __FileName)
            info.AddValue("FileSize", __FileSize)
            info.AddValue("ContentType", __ContentType)
            If (__Url IsNot Nothing) Then
                info.AddValue("Url", __Url.ToString())
            Else
                info.AddValue("Url", "")
            End If
        End Sub

    End Class

    ''' <summary>
    ''' Represents the event data for the UploadedFile event.
    ''' </summary>
    Public Class UploadedFileEventArgs
        Inherits EventArgs

        Private __File As HttpPostedFile = Nothing
        Private __ID As Guid = Guid.NewGuid()
        Private __Uri As Uri = Nothing
        Private __UploadError As Boolean
        Private __ErrorMessage As String

        ''' <summary>
        ''' Initializes an instance of the <see cref="UploadedFileEventArgs" /> class.
        ''' </summary>
        ''' <param name="file">An <see cref="HttpPostedFile"/> that represents
        ''' the file uploaded to the server.</param>
        Friend Sub New(ByVal file As HttpPostedFile)
            __File = file
        End Sub

        ''' <summary>
        ''' Gets or sets an human readable message indicating the cause of the error while processing the file.
        ''' </summary>
        Public Property ErrorMessage() As String
            Get
                Return __ErrorMessage
            End Get
            Set(ByVal value As String)
                __ErrorMessage = value
            End Set
        End Property

        ''' <summary>
        ''' Gets the file uploaded to the server.
        ''' </summary>
        Public ReadOnly Property File() As HttpPostedFile
            Get
                Return __File
            End Get
        End Property

        ''' <summary>
        ''' The Global Unique Identifier of the file in the server.
        ''' </summary>
        Public ReadOnly Property ID() As Guid
            Get
                Return __ID
            End Get
        End Property

        ''' <summary>
        ''' Gets or sets the an <see cref="Uri"/> object that represents the virtual path to the uploaded file.
        ''' </summary>
        ''' <remarks>
        ''' The page housing the AjaxUpload control should set this property in the UploadedFile event.
        ''' </remarks>
        Public Property VirtualPath() As Uri
            Get
                Return __Uri
            End Get
            Set(ByVal value As Uri)
                __Uri = value
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets a value indicating that an error occured while processing the file.
        ''' </summary>
        Public Property UploadError() As Boolean
            Get
                Return __UploadError
            End Get
            Set(ByVal value As Boolean)
                __UploadError = value
            End Set
        End Property

    End Class

    ''' <summary>
    ''' Represents the event data for the RemovedFile event.
    ''' </summary>
    Public Class RemovedFileEventArgs
        Inherits EventArgs

        Private __ID As Guid
        Private __FileName As String
        Private __FileSize As Integer
        Private __Type As String
        Private __PreventRemove As Boolean
        Private __PreventRemoveReason As String

        ''' <summary>
        ''' Initializes an instance of the <see cref="RemovedFileEventArgs" /> class.
        ''' </summary>
        ''' <param name="id">A <see cref="Guid"/> object that represents the Global Unique Identifier of the file in the server</param>
        ''' <param name="fileName">The name of the file.</param>
        ''' <param name="fileSize">The size of the file.</param>
        ''' <param name="type">The Content-Type of the file.</param>
        Friend Sub New(ByVal id As Guid, ByVal fileName As String, ByVal fileSize As Integer, ByVal type As String)
            __ID = id
            __FileName = fileName
            __FileSize = fileSize
            __Type = type
        End Sub

        ''' <summary>
        ''' The name of the removed file.
        ''' </summary>
        Public ReadOnly Property FileName() As String
            Get
                Return __FileName
            End Get
        End Property

        ''' <summary>
        ''' The size of the removed file.
        ''' </summary>
        Public ReadOnly Property FileSize() As Integer
            Get
                Return __FileSize
            End Get
        End Property

        ''' <summary>
        ''' The ID of the removed file.
        ''' </summary>
        Public ReadOnly Property ID() As Guid
            Get
                Return __ID
            End Get
        End Property

        ''' <summary>
        ''' The content-type of the removed file.
        ''' </summary>
        Public ReadOnly Property ContentType() As String
            Get
                Return __Type
            End Get
        End Property

        ''' <summary>
        ''' Gets or sets a value indicating if the removal of the file is to be prevented.
        ''' </summary>
        ''' <value><c>True</c> if the removal is to be prevented; otherwise <c>false</c>.</value>
        Public Property PreventRemove() As Boolean
            Get
                Return __PreventRemove
            End Get
            Set(ByVal value As Boolean)
                __PreventRemove = value
            End Set
        End Property

        ''' <summary>
        ''' Gets or sets an human readable message that describes why the removal of the file was prevented.
        ''' </summary>
        Public Property PreventRemoveReason() As String
            Get
                Return __PreventRemoveReason
            End Get
            Set(ByVal value As String)
                __PreventRemoveReason = value
            End Set
        End Property

    End Class

#End Region

#Region " Events "

    ''' <summary>
    ''' Occurs when a file is uploaded to the server.
    ''' </summary>
    ''' <remarks>
    ''' If the page housing this control updates the <see cref="UploadedFileEventArgs.VirtualPath"/> property
    ''' of the <see cref="UploadedFileEventArgs"/> the <see cref="AjaxUpload"/> control will show a link
    ''' to the uploaded file, instead of only showing the name.
    ''' <p />
    ''' If, for some reason, the file is rejected by the housing page, callers should set the UploadError
    ''' property of the event arguments and, optionally, the ErrorMessage informing the user the motive.
    ''' </remarks>
    Public Event UploadedFile As EventHandler(Of UploadedFileEventArgs)

    ''' <summary>
    ''' Occurs when a file is removed by the user.
    ''' </summary>
    ''' <remarks>
    ''' If, for some reason, the file should not be removed from the list, callers should set the PreventRemove
    ''' property of the event arguments and, optionally, the PreventRemoveReason informing the user the reason.
    ''' </remarks>
    Public Event RemovedFile As EventHandler(Of RemovedFileEventArgs)

#End Region

#Region " Public Properties "

    ''' <summary>
    ''' Gets or sets a value indicating whether the file icon will be shown.
    ''' </summary>
    ''' <value><c>true</c> if the file icon will be shown; otherwise, <c>false</c>.</value>
    <DefaultValue(True)> _
    Public Property DisplayIcon() As Boolean
        Get
            If (ViewState("DisplayIcon") Is Nothing) Then
                Return True
            End If
            Return CBool(ViewState("DisplayIcon"))
        End Get
        Set(ByVal value As Boolean)
            ViewState("DisplayIcon") = value
        End Set
    End Property

    ''' <summary>
    ''' Gets or sets the message to be displayed when the control does not have an input type=file available.
    ''' </summary>
    ''' <value>The message to be displayed when the control does not have an input type=file available.</value>
    <DefaultValue("Upload file")> _
    Public Property NoControlMessage() As String
        Get
            If (ViewState("NoControlMessage") Is Nothing) Then
                Return "Upload file"
            End If
            Return ViewState("NoControlMessage")
        End Get
        Set(ByVal value As String)
            ViewState("NoControlMessage") = value
        End Set
    End Property

    ''' <summary>
    ''' Gets or sets the message to be displayed when the file failed to be uploaded.
    ''' </summary>
    ''' <value>The message to be displayed when the file failed to be uploaded.</value>
    <DefaultValue("Unable to upload file.")> _
    Public Property ErrorMessage() As String
        Get
            If (ViewState("ErrorMessage") Is Nothing) Then
                Return "Unable to upload file."
            End If
            Return ViewState("ErrorMessage")
        End Get
        Set(ByVal value As String)
            ViewState("ErrorMessage") = value
        End Set
    End Property

    ''' <summary>
    ''' Gets or sets the message when the user hover over the remove icon.
    ''' </summary>
    ''' <value>The message when the user hover over the remove icon.</value>
    <DefaultValue("Remove file")> _
    Public Property RemoveMessage() As String
        Get
            If (ViewState("RemoveMessage") Is Nothing) Then
                Return "Remove file"
            End If
            Return ViewState("RemoveMessage")
        End Get
        Set(ByVal value As String)
            ViewState("RemoveMessage") = value
        End Set
    End Property

    ''' <summary>
    ''' Gets or sets the message shown when the user atempts to remove a file.
    ''' </summary>
    ''' <value>The message shown when the user atempts to remove a file..</value>
    <DefaultValue("Do you want to remove this file?")> _
    Public Property ConfirmRemoveMessage() As String
        Get
            If (ViewState("ConfirmRemoveMessage") Is Nothing) Then
                Return "Do you want to remove this file?"
            End If
            Return ViewState("ConfirmRemoveMessage")
        End Get
        Set(ByVal value As String)
            ViewState("ConfirmRemoveMessage") = value
        End Set
    End Property

    ''' <summary>
    ''' Gets or sets a value that indicates if the file list should be stored in session, instead of hidden fields.
    ''' </summary>
    ''' <value><c>true</c> if the file list is to be stores in the session object; <c>false</c> otherwise.</value>
    <DefaultValue(False)> _
    Public Property StoreFileListInSession() As Boolean
        Get
            If (ViewState("StoreFileListInSession") Is Nothing) Then
                Return False
            End If
            Return CBool(ViewState("StoreFileListInSession"))
        End Get
        Set(ByVal value As Boolean)
            ViewState("StoreFileListInSession") = value
        End Set
    End Property

    ''' <summary>
    ''' Gets an array of <see cref="Guid"/> that represents the file id uploaded by the client.
    ''' </summary>
    ''' <value>An array of <see cref="Guid"/> that represents the file id uploaded by the client.</value>
    ''' <remarks>
    ''' This property is only available during post backs.
    ''' </remarks>
    Public ReadOnly Property FileList() As FileInfo()
        Get
            '*
            '* Load the file list from the session, if required
            '*
            If (Me.StoreFileListInSession) Then
                If (Session(Me.UniqueID & ".FileList") IsNot Nothing) Then
                    __FileList = TryCast(Session(Me.UniqueID & ".FileList"), Dictionary(Of Guid, FileInfo))
                End If
            End If

            '*
            '* Just in case the cast above fails
            '*
            If (__FileList Is Nothing) Then
                __FileList = New Dictionary(Of Guid, FileInfo)
            End If

            '*
            '* Copy the file list into an array
            '*
            Dim files() As FileInfo = {}
            Array.Resize(files, __FileList.Count)
            __FileList.Values.CopyTo(files, 0)
            Return files
        End Get
    End Property

#End Region

#Region " Public Methods "

    ''' <summary>
    ''' Determines whether the <see cref="AjaxUpload"/> contains the specified file name.
    ''' </summary>
    ''' <param name="fileName">The file name to locate in the <see cref="AjaxUpload"/>.</param>
    ''' <returns><c>true</c> if the file name is found in the <see cref="AjaxUpload"/>; otherwise false.</returns>
    Public Function Contains(ByVal fileName As String) As Boolean
        For Each f As FileInfo In __FileList.Values
            If (f.FileName.Equals(fileName, StringComparison.CurrentCultureIgnoreCase)) Then
                Return True
            End If
        Next
        Return False
    End Function

    ''' <summary>
    ''' Removes all files from the <see cref="AjaxUpload"/>.
    ''' </summary>
    Public Sub Clear()
        For Each f As FileInfo In Me.FileList
            Dim args As New RemovedFileEventArgs(f.ID, f.FileName, f.FileSize, f.ContentType)
            RaiseEvent RemovedFile(Me, args)
            If (Not args.PreventRemove) Then
                __FileList.Remove(f.ID)
            End If
        Next
    End Sub

#End Region

#Region " Overrides "

    ''' <summary>Raises the <see cref="E:System.Web.UI.Control.Init"></see> event.</summary>
    ''' <param name="e">An <see cref="T:System.EventArgs"></see> object that contains the event data. </param>
    Protected Overrides Sub OnInit(ByVal e As System.EventArgs)

        '*
        '* It it's postback fill up the FileList property
        '*
        If (Me.IsPostBack) AndAlso (Not String.IsNullOrEmpty(Request(Me.UniqueID & "$fileID"))) Then
            Dim rx As New Regex("(?<id>.+?)\|(?<fileName>.+?)\|(?<type>.+?)\|(?<url>.*?)\|(?<fileSize>[0-9]+),?")
            For Each m As Match In rx.Matches(Request(Me.UniqueID & "$fileID"))
                Dim guid As New Guid(m.Groups("id").Value)
                Dim fileName As String = m.Groups("fileName").Value
                Dim fileSize As Integer = Integer.Parse(m.Groups("fileSize").Value)
                Dim url As Uri = Nothing
                Dim type As String = m.Groups("type").Value
                If (m.Groups("url").Success AndAlso m.Groups("url").Value <> "") Then
                    url = New Uri(m.Groups("url").Value)
                End If
                __FileList.Add(guid, New FileInfo(guid, fileName, fileSize, type, url))
            Next
        End If

        '*
        '* Check if it's a Post Back and if the target of the event is this instance
        '*
        If (Me.IsPostBack AndAlso Request("__EVENTTARGET") = Me.UniqueID) Then
            '*
            '* The control prevents the rendering of the page, so
            '* we render a page with the properties we want to
            '* transfer to the client.
            '*

            Dim html As New HtmlGenericControl("html")
            Dim head As New HtmlGenericControl("head") : html.Controls.Add(head)
            Dim body As New HtmlGenericControl("body") : html.Controls.Add(body)
            Dim form As New HtmlGenericControl("form") : body.Controls.Add(form)

            If (Request("__EVENTARGUMENT") <> "") Then
                '*
                '* A file was removed by the user
                '*
                Dim info() As String = Request("__EVENTARGUMENT").Split("|")
                Dim args As New RemovedFileEventArgs(New Guid(info(0)), info(1), CInt(info(2)), info(3))
                Try
                    '*
                    '* Even thou an error might occur when processing the file
                    '* we must not prevent the proper rendering of the information
                    '*
                    RaiseEvent RemovedFile(Me, args)
                Catch ex As Exception
                    args.PreventRemove = True
                    args.PreventRemoveReason = ex.Message
                End Try

                Dim fileID As New HtmlInputHidden() : form.Controls.Add(fileID)
                fileID.ID = "ID"
                fileID.Value = args.ID.ToString()

                Dim fileName As New HtmlInputHidden() : form.Controls.Add(fileName)
                fileName.ID = "fileName"
                fileName.Value = args.FileName.Substring(args.FileName.LastIndexOf("\") + 1)

                Dim fileSize As New HtmlInputHidden() : form.Controls.Add(fileSize)
                fileSize.ID = "fileSize"
                fileSize.Value = args.FileSize.ToString()

                Dim fileContentType As New HtmlInputHidden() : form.Controls.Add(fileContentType)
                fileContentType.ID = "ContentType"
                fileContentType.Value = args.ContentType

                If (args.PreventRemove) Then
                    '*
                    '* Instructs the client not to remove the file
                    '*
                    Dim removePrevented As New HtmlInputHidden() : form.Controls.Add(removePrevented)
                    removePrevented.ID = "donotremove"
                    removePrevented.Value = "true"

                    '*
                    '* Instructs the client not to remove the file
                    '*
                    Dim reason As New HtmlInputHidden() : form.Controls.Add(reason)
                    reason.ID = "message"
                    reason.Value = args.PreventRemoveReason
                Else
                    '*
                    '* Remove the file from the list
                    '*
                    __FileList.Remove(args.ID)
                End If

                '*
                '* Indicate to the client that it is an action of removal
                '*
                Dim removed As New HtmlInputHidden() : form.Controls.Add(removed)
                removed.ID = "removed"
                removed.Value = "true"
            Else
                '*
                '* It may have more than one input type=file
                '* on the page, so we scan for OUR file.
                '*
                For Each s As String In Request.Files
                    If (s = Me.ClientID & "_file") Then
                        Dim f As HttpPostedFile = Request.Files(s)

                        Dim args As New UploadedFileEventArgs(f)
                        Try
                            '*
                            '* Even thou an error might occur when processing the file
                            '* we must not prevent the proper rendering of the information
                            '*
                            RaiseEvent UploadedFile(Me, args)
                        Catch ex As Exception
                            args.UploadError = True
                            args.ErrorMessage = ex.Message
                        End Try

                        '*
                        '* If a problem occurred while processing the file,
                        '* we do not send the ID, which indicates to the client
                        '* that the server rejected the uploaded file.
                        '*
                        If (args.UploadError) Then
                            Dim reason As New HtmlInputHidden() : form.Controls.Add(reason)
                            reason.ID = "message"
                            reason.Value = args.ErrorMessage
                        Else
                            Dim fileID As New HtmlInputHidden() : form.Controls.Add(fileID)
                            fileID.ID = "ID"
                            fileID.Value = args.ID.ToString()
                        End If

                        Dim fileName As New HtmlInputHidden() : form.Controls.Add(fileName)
                        fileName.ID = "fileName"
                        fileName.Value = f.FileName.Substring(f.FileName.LastIndexOf("\") + 1)

                        Dim fileSize As New HtmlInputHidden() : form.Controls.Add(fileSize)
                        fileSize.ID = "fileSize"
                        fileSize.Value = f.InputStream.Length.ToString()

                        Dim fileContentType As New HtmlInputHidden() : form.Controls.Add(fileContentType)
                        fileContentType.ID = "ContentType"
                        fileContentType.Value = f.ContentType

                        If (args.VirtualPath IsNot Nothing) Then
                            Dim url As New HtmlInputHidden() : form.Controls.Add(url)
                            url.ID = "url"
                            url.Value = args.VirtualPath.ToString()
                        End If

                        '*
                        '* Add the file to the list
                        '*
                        __FileList.Add(args.ID, New FileInfo(args.ID, fileName.Value, f.InputStream.Length, f.ContentType, args.VirtualPath))
                    End If
                Next
            End If

            '*
            '* Store the FileList in the session object, if required
            '*
            If (Me.StoreFileListInSession) Then
                Session(Me.UniqueID & ".FileList") = __FileList
            End If

            '*
            '* Render the data page to the client
            '*
            Dim sw As New IO.StringWriter()
            Dim writer As New HtmlTextWriter(sw)
            html.RenderControl(writer)

            Response.Clear()
            Response.Write(sw.ToString())
            Response.End()
            Exit Sub
        End If

        '*
        '* Register to save view state
        '*
        Page.RegisterRequiresControlState(Me)

        '*
        '* Include the Script
        '*

#If _AJAX_ Then
        ScriptManager.RegisterClientScriptInclude(Me.Page, GetType(Page), "AjaxUpload.js", Me.TemplateDir & "/AjaxUpload.js")
#Else
        Me.Page.ClientScript.RegisterClientScriptInclude(GetType(Page), "AjaxUpload.js", Me.TemplateDir & "/AjaxUpload.js")
#End If

        '*
        '* Initialize the control
        '*
#If _AJAX_ Then
        ScriptManager.RegisterStartupScript(Me.Page, GetType(Page), "AjaxUpload.init." & Me.ClientID, "__AjaxUploadInit('" & Me.ClientID & "');", True)
#Else
        Me.Page.ClientScript.RegisterStartupScript(GetType(Page), "AjaxUpload.init." & Me.ClientID, "__AjaxUploadInit('" & Me.ClientID & "');", True)
#End If

        '*
        '* Set the loading img
        '*
        Me.imgUploading.Src = Me.TemplateDir & "/uploading.gif"

        '*
        '* Raise the Init event
        '*
        MyBase.OnInit(e)

    End Sub

    ''' <summary>Raises the <see cref="E:System.Web.UI.Control.PreRender"></see> event.</summary>
    ''' <param name="e">An <see cref="T:System.EventArgs"></see> object that contains the event data. </param>
    Protected Overrides Sub OnPreRender(ByVal e As System.EventArgs)

        '*
        '* Register the onSubmit method
        '*
#If _AJAX_ Then
        ScriptManager.RegisterOnSubmitStatement(Me.Page, GetType(Page), "AjaxUpload.onsubmit." & Me.ClientID, "RemoveInputFile('" & Me.ClientID & "', '" & Server.HtmlEncode(Me.NoControlMessage).Replace("'", "\'") & "');")
#Else
        Me.Page.ClientScript.RegisterOnSubmitStatement(GetType(Page), "AjaxUpload.onsubmit." & Me.ClientID, "RemoveInputFile('" & Me.ClientID & "', '" & Server.HtmlEncode(Me.NoControlMessage).Replace("'", "\'") & "');")
#End If

        '*
        '* Show the file list in a full post back
        '*
        For Each f As FileInfo In FileList
            Dim oTR As New HtmlTableRow
            Dim oTD As New HtmlTableCell : oTR.Cells.Add(oTD)

            oTR.Attributes.Add("id", f.ID.ToString())

            If (Me.DisplayIcon) Then
                Dim img As New WebControls.Image
                img.ImageUrl = Me.TemplateDir & "/icon.aspx?extension=" & Server.UrlEncode(f.FileName.Substring(f.FileName.LastIndexOf(".") + 1))
                img.Width = New Unit(16, UnitType.Pixel)
                img.Height = New Unit(16, UnitType.Pixel)
                oTD.Controls.Add(img)
                oTD = New HtmlTableCell() : oTR.Cells.Add(oTD)
            End If

            If (f.Url IsNot Nothing) Then
                Dim a As New HtmlControls.HtmlAnchor
                a.InnerText = f.FileName
                a.HRef = f.Url.ToString()
                oTD.Controls.Add(a)
            Else
                oTD.InnerText = f.FileName
            End If

            oTD = New HtmlTableCell() : oTR.Cells.Add(oTD)
            Dim imgRemove As New WebControls.Image
            imgRemove.Style.Add("cursor", "pointer")
            imgRemove.Width = New Unit(16, UnitType.Pixel)
            imgRemove.Height = New Unit(16, UnitType.Pixel)
            imgRemove.ImageUrl = Me.TemplateDir & "/remove.png"
            imgRemove.Attributes.Add("onclick", "RemoveFile(event, this, '" & f.ID.ToString() & "', '" & f.FileName.Replace("'", "\'") & "', " & f.FileSize.ToString() & ", '" & f.ContentType & "')")
            oTD.Controls.Add(imgRemove)

            Dim hid As New HtmlControls.HtmlInputHidden
            hid.ID = "fileID"
            hid.Name = "fileID"
            If (f.Url IsNot Nothing) Then
                hid.Value = f.ID.ToString() & "|" & f.FileName & "|" & f.ContentType & "|" & f.Url.ToString() & "|" & f.FileSize.ToString()
            Else
                hid.Value = f.ID.ToString() & "|" & f.FileName & "|" & f.ContentType & "||" & f.FileSize.ToString()
            End If
            oTD.Controls.Add(hid)

            Me.files.Rows.Add(oTR)
        Next

        MyBase.OnPreRender(e)
    End Sub

    ''' <summary>Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter"></see> object, which writes the content to be rendered on the client.</summary>
    ''' <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"></see> object that receives the server control content. </param>
    Protected Overrides Sub Render(ByVal writer As System.Web.UI.HtmlTextWriter)

        '*
        '* Render the control container
        '*
        Dim postbackFunction As String = Page.ClientScript.GetPostBackEventReference(Me, Nothing)

        postbackFunction = postbackFunction.Substring(0, postbackFunction.IndexOf("("))

        writer.WriteBeginTag("span")
        writer.WriteAttribute("id", Me.ClientID)
        writer.WriteAttribute("name", Me.UniqueID)
        writer.WriteAttribute("displayIcon", IIf(Me.DisplayIcon, "1", "0"))
        writer.WriteAttribute("controlLocation", Me.TemplateDir)
        writer.WriteAttribute("errorMessage", Me.ErrorMessage)
        writer.WriteAttribute("removeMessage", Me.RemoveMessage)
        writer.WriteAttribute("confirmMessage", Me.ConfirmRemoveMessage)
        writer.WriteAttribute("postbackFunction", postbackFunction)
        For Each s As String In Me.Attributes.Keys
            writer.WriteAttribute(s, Me.Attributes(s))
        Next
        writer.Write(">")

        '*
        '* Ensure the __doPostBack function
        '*
        Page.ClientScript.RegisterForEventValidation(New PostBackOptions(Me))

        '*
        '* Render the control
        '*
        MyBase.Render(writer)

        '*
        '* Render the end tag
        '*
        writer.WriteEndTag("span")

    End Sub

    Private Function TemplateDir() As String
        Dim dir As String = Me.TemplateSourceDirectory
        If (dir.EndsWith("/")) Then Return dir.Substring(0, dir.Length - 1)
        Return dir
    End Function

#End Region

End Class